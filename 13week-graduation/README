对当下自己项目中的业务，进行一个微服务改造，需要考虑如下技术点：
1. 微服务架构（BFF、Service、Admin、Job、Task 分模块）
2. API 设计（包括 API 定义、错误码规范、Error 的使用）
3. gRPC 的使用
4. Go 项目工程化（项目结构、DI、代码分层、ORM 框架）
5. 并发的使用（errgroup 的并行链路请求）
6. 微服务中间件的使用（ELK、Opentracing、Prometheus、Kafka）
7. 缓存的使用优化（一致性处理、Pipeline 优化）

ps: 公司的项目不能发上来, 我说说我大致的处理办法, 我在公司主要负责评论的业务, 这个项目历史问题比较严重

1. 当前的业务规划, 评论服务, 评论数服务, 点赞服务, 后台项目四个微服务组成评论中台, 因为人员配备2-3人, BFF跟Service是合在一起的, Job跟Task都是几个微服务的子项目, 负责做定时任务跟db订阅的业务, 服务的划分跟课程的描述本质上也是比较类似的
2. 当前api的设计比较随意, 错误码跟error的使用不规范有很大的改造空间
    2.1. api的设计上我认为项目需要改进的有两个点, 第一, 通过一些生成办法, 使用代码跟接口文档能保持一直. 第二, 接口的定义修改需要业务负责人来审批, 或者自动识别的办法, 来保证接口改动的内敛性跟兼容性, 这两方面现在都是做的不够的
    2.2. 错误码, 现在主要划分后端错误码跟apm错误码, 线上报错通常能根据错误码定位到异常点, 在根据异常点排查上游或下游异常, 错误的规范上个人感觉问题不是很大
    2.3. error的使用, 有些地方规范不够会不是用wraperror, 后面可能增加一些codereview
3. gRPC这个我觉得比较难在一个微服务上实现, 需要公司自顶而下的推广这个技术, 所以不太考虑引入grpc, 不过公司如果引入我觉得主要有两点, 第一, 各个业务需要维护自己需要发布服务的dsl, 第二, 架构组的服务发现跟服务跟踪监控需要接入到grpc
4. 项目目录分层, 当前情况项目比较老, 他原本划分就是基本的mvc, 工程化的课程有些比较规范的做法, 跟引入的ddd的设计方法, 这些理念比较好, 如果项目本体上需要按这些理念来构建当前成本比较高, 暂时不太引入, 不过当前如果有些活动类的逻辑, 可能通过DDD的办法梳理业务, 让代码重用性高一些, 或者是无代码来增加活动
5. errgroup的改造, 请求上游服务时候, 判断是强依赖还是弱依赖, 强依赖的服务有问题, 直接通过context判断, 响应异常结果
6. 中间件:
    1. 当前项目ELK主要还是使用在后台的数据搜索, 业务有数据改动时候有会订阅改动同步到elk,
    2. Opentracing, Prometheus: 调用链路跟踪和服务监控, 公司已经有基础平台提供, 直接接入就可以了
    3. kafka, 跟其他项目通信时候, 需要梳理主题的业务场景
7. 缓存
    1. 一致性处理, 项目上的db跟cache一致处理都是使用订阅db的方式来保证
    2. pipeline优化, 一般相关的查询都是使用pipeline查询, 但是有些代码特别混乱, 就需要把代码理清晰, 优化好代码才实现pieline


